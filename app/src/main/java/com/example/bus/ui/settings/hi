package com.example.bus;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.Network;
import android.net.NetworkCapabilities;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import androidx.appcompat.app.AppCompatActivity;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import com.example.bus.databinding.ActivityMainBinding;
import com.example.bus.ui.dbs.AppDatabase;
import com.example.bus.ui.dbs.DatabaseSeeder;
import com.example.bus.ui.dbs.FirestoreUploader;
import com.example.bus.ui.login.LoginActivity;
import com.example.bus.ui.login.SignupActivity;
import com.google.android.material.navigation.NavigationView;
import com.google.firebase.FirebaseApp;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreSettings;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {
    private AppBarConfiguration mAppBarConfiguration;
    private static final String TAG = "MainActivity";
    private final ExecutorService executorService = Executors.newFixedThreadPool(2); // ‚úÖ More efficient
    private FirebaseFirestore firestore;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FirebaseFirestoreSettings settings = new FirebaseFirestoreSettings.Builder()
                .setPersistenceEnabled(true) // ‚ùå Disable offline mode
                .build();
        FirestoreUploader.uploadData();
        FirebaseFirestore.getInstance().setFirestoreSettings(settings);
        FirebaseApp.initializeApp(this);
        firestore = FirebaseFirestore.getInstance();
        ActivityMainBinding binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        setSupportActionBar(binding.appBarMain.toolbar);
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        // üîπ Initialize Firestore
        firestore = FirebaseFirestore.getInstance();

        // ‚úÖ Fetch & Log Firestore Data
        fetchFirestoreData();
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home,
                R.id.bus_timing,
                R.id.search_bus,
                R.id.nav_feedback,
                R.id.nav_settings
        ).setOpenableLayout(drawer).build();

        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);

        // ‚úÖ Ensure database is initialized before seeding
        executorService.execute(() -> {
            AppDatabase db = AppDatabase.getInstance(this);
            DatabaseSeeder.populateDatabase(this);
            verifyDatabaseData(db);
        });

        navigationView.setNavigationItemSelectedListener(item -> {
            int id = item.getItemId();
            if (id == R.id.nav_add_account) {
                addNewAccount();
            } else if (id == R.id.nav_logout) {
                logoutUser();
            } else {
                NavigationUI.onNavDestinationSelected(item, navController);
            }
            drawer.closeDrawers();
            return true;
        });
    }

    /** ‚úÖ Verify Room Database */
    private void verifyDatabaseData(AppDatabase db) {
        executorService.execute(() -> {
            logData("Districts", db.daoInterfaces().getAllDistricts());
            logData("Taluks", db.daoInterfaces().getAllTaluks());
            logData("Bus Stands", db.daoInterfaces().getAllBusStands());
            logData("Routes", db.daoInterfaces().getAllRoutes());
            logData("Buses", db.daoInterfaces().getAllBuses());
            logData("Stops", db.daoInterfaces().getAllStops());
            logData("Timings", db.daoInterfaces().getAllTimings());
            Log.d(TAG, "‚úÖ Database Verification Complete!");
        });
    }

    /** ‚úÖ Log Data */
    private <T> void logData(String label, List<T> data) {
        Log.d(TAG, "üìå " + label + ":");
        for (T item : data) {
            Log.d(TAG, "   ‚û° " + item.toString());
        }
    }

    /** ‚úÖ Check Internet Connectivity */
    private boolean isConnectedToInternet() {
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        if (cm != null) {
            Network network = cm.getActiveNetwork();
            if (network != null) {
                NetworkCapabilities capabilities = cm.getNetworkCapabilities(network);
                return capabilities != null &&
                        (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||
                                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||
                                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET));
            }
        }
        return false;
    }

    /** ‚úÖ Log out User */
    private void logoutUser() {
        SharedPreferences.Editor editor = getSharedPreferences("UserSession", MODE_PRIVATE).edit();
        editor.clear().apply();
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        finish();
    }

    /** ‚úÖ Add a New Account */
    private void addNewAccount() {
        startActivity(new Intent(MainActivity.this, SignupActivity.class));
    }

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration) || super.onSupportNavigateUp();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        executorService.shutdown(); // ‚úÖ Prevent memory leaks
    }
    private void fetchFirestoreData() {
        FirebaseFirestore db = FirebaseFirestore.getInstance();

        // üîπ Fetch Districts
        db.collection("districts").get().addOnSuccessListener(districts -> {
            for (DocumentSnapshot districtDoc : districts) {
                String districtID = districtDoc.getId();
                String districtName = districtDoc.getString("name");

                Log.d(TAG, "üìç District: " + districtName);

                // üîπ Fetch Taluks
                db.collection("taluks").whereEqualTo("districtID", districtID).get().addOnSuccessListener(taluks -> {
                    for (DocumentSnapshot talukDoc : taluks) {
                        String talukID = talukDoc.getId();
                        String talukName = talukDoc.getString("name");

                        Log.d(TAG, "   ‚Ü≥ üè¢ Taluk: " + talukName);

                        // üîπ Fetch Bus Stands
                        db.collection("bus_stands").whereEqualTo("talukID", talukID).get().addOnSuccessListener(busStands -> {
                            for (DocumentSnapshot busStandDoc : busStands) {
                                String busStandID = busStandDoc.getId();
                                String busStandName = busStandDoc.getString("name");

                                Log.d(TAG, "       ‚Ü≥ üöè Bus Stand: " + busStandName);

                                // üîπ Fetch Routes
                                db.collection("routes").whereEqualTo("busStandID", busStandID).get().addOnSuccessListener(routes -> {
                                    for (DocumentSnapshot routeDoc : routes) {
                                        String routeID = routeDoc.getId();
                                        String routeName = routeDoc.getString("name");

                                        Log.d(TAG, "           ‚Ü≥ üõ£Ô∏è Route: " + routeName);

                                        // üîπ Fetch Buses
                                        db.collection("buses").whereEqualTo("routeID", routeID).get().addOnSuccessListener(buses -> {
                                            for (DocumentSnapshot busDoc : buses) {
                                                String busID = busDoc.getId();
                                                String busName = busDoc.getString("name");

                                                Log.d(TAG, "               ‚Ü≥ üöå Bus: " + busName);

                                                // üîπ Fetch Stops
                                                db.collection("stops").whereEqualTo("busID", busID).get().addOnSuccessListener(stops -> {
                                                    for (DocumentSnapshot stopDoc : stops) {
                                                        Log.d(TAG, "                   ‚Ü≥ ‚è∏ Stop: " + stopDoc.getString("stopName"));
                                                    }
                                                });

                                                // üîπ Fetch Timings
                                                db.collection("timings").whereEqualTo("busID", busID).get().addOnSuccessListener(timings -> {
                                                    for (DocumentSnapshot timingDoc : timings) {
                                                        Log.d(TAG, "                   ‚Ü≥ ‚è∞ Timing: " + timingDoc.getString("predictedTime"));
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    }

}

